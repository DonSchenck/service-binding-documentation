"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[771],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return g}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),p=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return i.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),g=r,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||a;return t?i.createElement(m,o(o({ref:n},l),{},{components:t})):i.createElement(m,o({ref:n},l))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<a;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8763:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],c={sidebar_position:6},s={unversionedId:"creating-service-bindings/service-binding-resource",id:"creating-service-bindings/service-binding-resource",isDocsHomePage:!1,title:"Service Binding Resource",description:"In this section, we would highlight the different options based on the specification",source:"@site/docs/creating-service-bindings/service-binding-resource.md",sourceDirName:"creating-service-bindings",slug:"/creating-service-bindings/service-binding-resource",permalink:"/service-binding-documentation/docs/creating-service-bindings/service-binding-resource",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/creating-service-bindings/service-binding-resource.md",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Unbind Application",permalink:"/service-binding-documentation/docs/creating-service-bindings/unbind-application"},next:{title:"General Concept",permalink:"/service-binding-documentation/docs/using-injected-bindings/using-injected-bindings"}},p=[],l={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"In this section, we would highlight the different options based on the specification")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/k8s-service-bindings/spec#service-binding"},"https://github.com/k8s-service-bindings/spec#service-binding")),(0,a.kt)("p",null,"This is the schema of ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceBinding")," resource:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"apiVersion: service.binding/v1alpha2\nkind: ServiceBinding\nmetadata:\n  name:                 # string\n  generation:           # int64, defined by the Kubernetes control plane\n  ...\nspec:\n  name:                 # string, optional, default: .metadata.name\n  type:                 # string, optional\n  provider:             # string, optional\n\n  application:          # ObjectReference-like\n    apiVersion:         # string\n    kind:               # string\n    name:               # string, mutually exclusive with selector\n    selector:           # metav1.LabelSelector, mutually exclusive with name\n    containers:         # []string, optional\n\n  service:              # Provisioned Service resource ObjectReference-like\n    apiVersion:         # string\n    kind:               # string\n    name:               # string\n\n  env:                  # []EnvMapping, optional\n  - name:               # string\n    key:                # string\n\nstatus:\n  binding:              # LocalObjectReference, optional\n    name:               # string\n  conditions:           # []metav1.Condition containing at least one entry for `Ready`\n  observedGeneration:   # int64\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},".spec.name")," is an optional field of type string.  It can be used to\noverride the ",(0,a.kt)("inlineCode",{parentName:"p"},".metadata.name")," value.  The ",(0,a.kt)("inlineCode",{parentName:"p"},".spec.name")," value is used as binding\nname.  In the below example projected bindings, ",(0,a.kt)("inlineCode",{parentName:"p"},"account-database")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"transaction-event-stream")," are two binding names:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$SERVICE_BINDING_ROOT\n\u251c\u2500\u2500 account-database\n\u2502   \u251c\u2500\u2500 type\n\u2502   \u251c\u2500\u2500 provider\n\u2502   \u251c\u2500\u2500 uri\n\u2502   \u251c\u2500\u2500 username\n\u2502   \u2514\u2500\u2500 password\n\u2514\u2500\u2500 transaction-event-stream\n    \u251c\u2500\u2500 type\n    \u251c\u2500\u2500 connection-count\n    \u251c\u2500\u2500 uri\n    \u251c\u2500\u2500 certificates\n    \u2514\u2500\u2500 private-key\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},".spec.type")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".spec.provider"),' values are added into the binding Secret\nresource.  Both fields are optional, if present, it will override value in the\nProvisioned Service Secret resource.  The chapter on "Using Injected Bindings"\nhas information about how to use these values to locate the bindings using the\nlanguage specific libraries.'),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},".spec.application")," and ",(0,a.kt)("inlineCode",{parentName:"p"},".spec.service")," is already explained in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Creating Service Binding")," chapter."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},".spec.env")," going to create environment variables in the application.  It is\na list of environment name and Secret keys.  The name is the environment\nvariable name, normally fully capitalized.  The key is any data key in\nProvisioned Service Secret resource."),(0,a.kt)("p",null,"The status details will be updated by the operator with a binding name,\nconditions, and observedGeneration."))}d.isMDXComponent=!0}}]);