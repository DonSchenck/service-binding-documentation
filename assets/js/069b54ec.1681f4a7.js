"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[523],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return t?i.createElement(g,o(o({ref:n},c),{},{components:t})):i.createElement(g,o({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9154:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var i=t(7462),a=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:2},l={unversionedId:"creating-service-bindings/binding-options",id:"creating-service-bindings/binding-options",isDocsHomePage:!1,title:"Advanced Binding Options",description:"Transform binding names before projection into application",source:"@site/docs/creating-service-bindings/binding-options.md",sourceDirName:"creating-service-bindings",slug:"/creating-service-bindings/binding-options",permalink:"/service-binding-documentation/docs/creating-service-bindings/binding-options",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/creating-service-bindings/binding-options.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Creating Service Binding",permalink:"/service-binding-documentation/docs/creating-service-bindings/creating-service-binding"},next:{title:"Custom Path Injection",permalink:"/service-binding-documentation/docs/creating-service-bindings/custom-path-injection"}},p=[{value:"Transform binding names before projection into application",id:"transform-binding-names-before-projection-into-application",children:[]},{value:"Compose custom binding variables",id:"compose-custom-binding-variables",children:[]}],c={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"transform-binding-names-before-projection-into-application"},"Transform binding names before projection into application"),(0,r.kt)("p",null,"WARNING: This feature is only available for ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceBinding")," in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"binding.operators.coreos.com")," API group."),(0,r.kt)("p",null,"If an application expects the projected environment variables in a particular\nformat, but the values from backing services are not available in that foramt,\nthen users can use the feature described here to transform binding names."),(0,r.kt)("p",null,"The transformation rules can be specified in the ",(0,r.kt)("inlineCode",{parentName:"p"},".spec.namingStrategy"),"\nattribute of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceBinding")," resource."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"namingStrategy")," is not specified, the environment variables are create\nlike this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"names are upper-cased"),(0,r.kt)("li",{parentName:"ul"},"service resource kind is upper-cased and prepended to the name")),(0,r.kt)("p",null,"Let's say there is a ",(0,r.kt)("inlineCode",{parentName:"p"},"host: example.com")," value in the backing service, the\nprojected environment variable is going to be like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"DATABASE_HOST: example.com\n")),(0,r.kt)("p",null,"In this example, ",(0,r.kt)("inlineCode",{parentName:"p"},"DATABASE")," is the backend service ",(0,r.kt)("inlineCode",{parentName:"p"},"Kind")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"HOST")," is the\nbinding name."),(0,r.kt)("h4",{id:"how-"},"How ?"),(0,r.kt)("p",null,"Following fields are part of ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceBinding")," request."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Application")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"  application:\n    name: nodejs-app\n    group: apps\n    version: v1\n    resource: deployments\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Backend/Database Service")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"namingStrategy: 'POSTGRES_{{ .service.kind | upper }}_{{ .name | upper }}_ENV'\nservices:\n  - group: postgresql.baiju.dev\n    version: v1alpha1\n    kind: Database\n    name: db-demo\n")),(0,r.kt)("p",null,"Considering following are the fields exposed by above service to use for binding"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"host"),(0,r.kt)("li",{parentName:"ol"},"port")),(0,r.kt)("p",null,"We have applied ",(0,r.kt)("inlineCode",{parentName:"p"},"POSTGRES_{{ .service.kind | upper }}_{{ .name | upper }}_ENV")," naming strategy"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},".name")," refers to the binding name specified in the crd annotation or descriptor."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},".service")," refer to the services in the ",(0,r.kt)("inlineCode",{parentName:"li"},"ServiceBinding")," request."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"upper")," is the string function used to postprocess the string while compiling the template string."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"POSTGRES")," is the prefix used."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"ENV")," is the suffix used.")),(0,r.kt)("p",null,"Following would be list of binding names prepared by above ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceBinding")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"POSTGRES_DATABASE_HOST_ENV: example.com\nPOSTGRES_DATABASE_PORT_ENV: 8080\n")),(0,r.kt)("p",null,"We can define how that key should be prepared defining string template in ",(0,r.kt)("inlineCode",{parentName:"p"},"namingStrategy")),(0,r.kt)("h4",{id:"naming-strategies"},"Naming Strategies"),(0,r.kt)("p",null,"There are few naming strategies predefine."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"none")," - When this is applied, we get binding names in following form - ",(0,r.kt)("inlineCode",{parentName:"li"},"{{ .name }}"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"host: example.com\nport: 8080\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"uppercase")," - This is by uppercase set when no ",(0,r.kt)("inlineCode",{parentName:"li"},"namingStrategy")," is defined\nand ",(0,r.kt)("inlineCode",{parentName:"li"},"bindAsFiles")," set to false - ",(0,r.kt)("inlineCode",{parentName:"li"},"{{ .service.kind | upper}}_{{ .name | upper\n}}"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"DATABASE_HOST: example.com\nDATABASE_PORT: 8080\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"lowercase")," - This is by default set when ",(0,r.kt)("inlineCode",{parentName:"li"},"bindAsFiles")," set to true - ",(0,r.kt)("inlineCode",{parentName:"li"},"{{ .name | lower }}"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"host: example.com\nport: 8080\n")),(0,r.kt)("h4",{id:"predefined-string-post-processing-functions"},"Predefined string post processing functions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"upper")," - Capatalize all letters"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"lower")," - Lowercase all letters"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"title")," - Title case all letters.")),(0,r.kt)("h2",{id:"compose-custom-binding-variables"},"Compose custom binding variables"),(0,r.kt)("p",null,"This feature is only available for ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceBinding")," in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"binding.operators.coreos.com")," API group."),(0,r.kt)("p",null,"If the backing service doesn't expose binding metadata or the values exposed are\nnot easily consumable, then an application author may compose custom binding\nvariables using attributes in the Kubernetes resource representing the backing\nservice."),(0,r.kt)("p",null,"The ",(0,r.kt)("em",{parentName:"p"},"custom binding variables")," feature enables application authors to request\ncustomized binding secrets using a combination of Go and jsonpath templating."),(0,r.kt)("p",null,"Example, the backing service CR may expose the host, port and database user in\nseparate variables, but the application may need to consume this information as\na connection string."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: binding.operators.coreos.com/v1alpha1\nkind: ServiceBinding\nmetadata:\n  name: multi-service-binding\n  namespace: service-binding-demo\nspec:\n\n  application:\n    name: java-app\n    group: apps\n    version: v1\n    resource: deployments\n\n services:\n  - group: postgresql.baiju.dev\n    version: v1alpha1\n    kind: Database\n    name: db-demo   <--- Database service\n    id: postgresDB <--- Optional \"id\" field\n  - group: ibmcloud.ibm.com\n    version: v1alpha1\n    kind: Binding\n    name: mytranslator-binding <--- Translation service\n    id: translationService\n\n  mappings:\n    ## From the database service\n    - name: JDBC_URL\n      value: 'jdbc:postgresql://{{ .postgresDB.status.dbConnectionIP }}:{{ .postgresDB.status.dbConnectionPort }}/{{ .postgresDB.status.dbName }}'\n    - name: DB_USER\n      value: '{{ .postgresDB.status.dbCredentials.user }}'\n\n    ## From the translator service\n    - name: LANGUAGE_TRANSLATOR_URL\n      value: '{{ index translationService.status.secretName \"url\" }}'\n    - name: LANGUAGE_TRANSLATOR_IAM_APIKEY\n      value: '{{ index translationService.status.secretName \"apikey\" }}'\n\n    ## From both the services!\n    - name: EXAMPLE_VARIABLE\n      value: '{{ .postgresDB.status.dbName }}{{ translationService.status.secretName}}'\n\n    ## Generate JSON.\n    - name: DB_JSON\n      value: {{ json .postgresDB.status }}\n")))}m.isMDXComponent=!0}}]);