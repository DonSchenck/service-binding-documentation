"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[53],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,g=u["".concat(l,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5240:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},l={unversionedId:"getting-started/quick-start",id:"getting-started/quick-start",isDocsHomePage:!1,title:"Quick Start Guide",description:"Service Binding manages the data plane for applications and backing services.",source:"@site/docs/getting-started/quick-start.md",sourceDirName:"getting-started",slug:"/getting-started/quick-start",permalink:"/service-binding-documentation/docs/getting-started/quick-start",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/getting-started/quick-start.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Installing Service Binding Operator",permalink:"/service-binding-documentation/docs/getting-started/installing-service-binding"},next:{title:"Creating Service Binding",permalink:"/service-binding-documentation/docs/creating-service-bindings/creating-service-binding"}},p=[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Create a PostgreSQL database instance",id:"create-a-postgresql-database-instance",children:[]},{value:"Deploying the sample application",id:"deploying-the-sample-application",children:[]},{value:"Connecting the application to the database",id:"connecting-the-application-to-the-database",children:[]},{value:"Next Steps",id:"next-steps",children:[]}],c={toc:p};function d(e){var t=e.components,s=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Service Binding manages the data plane for applications and backing services.\nThis guide provides the minimal information a needs to install the Service\nBinding Operator and use it to create a binding connection between components\nwithin an application."),(0,r.kt)("p",null,"The goal of this quick start guide is to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Provide an overview of Service Binding Operator."),(0,r.kt)("li",{parentName:"ul"},"Provide a list of prerequisites to be configured on your Kubernetes cluster."),(0,r.kt)("li",{parentName:"ul"},"Create a PostgreSQL database instance"),(0,r.kt)("li",{parentName:"ul"},"Deploy the application"),(0,r.kt)("li",{parentName:"ul"},"Connect the application to the database with Service Binding")),(0,r.kt)("p",null,"For this quick start, we are using a PostgreSQL database and a simple\napplication using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spring-petclinic/spring-petclinic-rest"},"Spring Boot REST API server")," sample.  This\nwill allow you to understand how Service Binding Operator can be used to\nsimplify the connection between a service, like a database and the application."),(0,r.kt)("p",null,"To illustrate what we are going to do, here is a visual representation of the\napplication we are going to setup."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"postgresql-spring-boot",src:n(3762).Z})),(0,r.kt)("p",null,"In this configuration, we leverage the service binding operator, to collect the\nbinding metadata from the PostgreSQL database and inject them into the sample\napplication."),(0,r.kt)("p",null,"Before starting, we invite you to refer to the ",(0,r.kt)("a",{parentName:"p",href:"#prerequisites"},"Prerequisites"),"\nsection to make sure you have all the needed components configured on your K8s\ncluster."),(0,r.kt)("p",null,"The quick start will then consist into three main steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#creating-a-database-instance"},"Create a PostgreSQL database instance")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#deploying-the-sample-application"},"Deploy the application")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"#connecting-the-application-to-a-backing-service"},"Connect the application to the database with Service Binding"))),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"In order to follow the quick start, you'll need the following tools installed and configured:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Kubernetes cluster (",(0,r.kt)("strong",{parentName:"li"},"Note:")," You can use ",(0,r.kt)("a",{parentName:"li",href:"https://minikube.sigs.k8s.io/"},"minikube")," or\n",(0,r.kt)("a",{parentName:"li",href:"https://kind.sigs.k8s.io/"},"kind"),", locally)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools/#kubectl"},"kubectl")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"installing-service-binding"},"Service Binding Operator"))),(0,r.kt)("h2",{id:"create-a-postgresql-database-instance"},"Create a PostgreSQL database instance"),(0,r.kt)("p",null,"The application is going to use to a PostgreSQL database backend which can be\nsetup using the ",(0,r.kt)("a",{parentName:"p",href:"https://operatorhub.io/operator/postgresql"},"Crunchy PostgreSQL operator from OperatorHub.io"),"."),(0,r.kt)("p",null,"The installation of the operator doesn't create a database instance itself, so\nwe need to create one."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"To create a database instance, you need to create custom resource ",(0,r.kt)("inlineCode",{parentName:"li"},"Pgcluster"),"\nand that will trigger the operator reconciliation.  For convenience, run this\ncommand to create ",(0,r.kt)("inlineCode",{parentName:"li"},"Pgcluster")," custom resource:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/slemeur/service-binding-documentation/raw/main/static/resources/pgcluster.yaml\n")),(0,r.kt)("p",null,"In this ",(0,r.kt)("inlineCode",{parentName:"p"},"Pgcluster")," custom resource, you might notice some annotations that we\nadded, those will be necessary to enable binding later into the quick start\nguide:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"service.binding/database: path={.spec.name}\nservice.binding/host: path={.spec.name}\nservice.binding/port: path={.spec.port}\n")),(0,r.kt)("p",null,"The annotions points to the values of ",(0,r.kt)("inlineCode",{parentName:"p"},"database"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"host"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"post")," in resource\nattributes.  For more details, refer ",(0,r.kt)("a",{parentName:"p",href:"../exposing-binding-data/intro-expose-binding"},"Exposing binding\ndata")," section."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Once the database is created, we need to ensure all the pods in\n",(0,r.kt)("inlineCode",{parentName:"li"},"my-postgresql")," namespace are running (it will take few minutes):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pod -n my-postgresql\n")),(0,r.kt)("p",null,"You should see output something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"NAME                                          READY   STATUS    RESTARTS   AGE\nbackrest-backup-hippo-9gtqf                   1/1     Running   0          13s\nhippo-597dd64d66-4ztww                        1/1     Running   0          3m33s\nhippo-backrest-shared-repo-66ddc6cf77-sjgqp   1/1     Running   0          4m27s\n")),(0,r.kt)("p",null,"The database has been created and is empty at this stage. We now need to set its\nschema and we will also inject a sample data set, so we can play around with the\napplication."),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"You can initialize the database with the schema and sample data using this\ncommand:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sL https://github.com/slemeur/service-binding-documentation/raw/main/static/resources/init-database.sh | bash\n")),(0,r.kt)("p",null,"We have now finished to configured the database for the application. We are\nready to deploy the sample application and connect it to the database."),(0,r.kt)("h2",{id:"deploying-the-sample-application"},"Deploying the sample application"),(0,r.kt)("p",null,"In this section, we are going to deploy the application on our kubernetes\ncluster. For that, we will use a deployment configuration and do the\nconfiguration of our local environment to be able to test the application."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Deploy the ",(0,r.kt)("inlineCode",{parentName:"li"},"spring-petclinic-rest")," app with this ",(0,r.kt)("inlineCode",{parentName:"li"},"Deployment")," configuration:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/slemeur/service-binding-documentation/raw/main/static/resources/app-deployment.yaml\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Let's now setup the port forwarding from the application port so we can\naccess it from our local environment")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl port-forward --address 0.0.0.0 svc/spring-petclinic-rest 9966:80 -n my-postgresql\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"You should be able to open\n",(0,r.kt)("a",{parentName:"li",href:"http://localhost:9966/petclinic"},"http://localhost:9966/petclinic")," and see a\n",(0,r.kt)("a",{parentName:"li",href:"https://swagger.io"},"Swagger UI")," where you can play with the API.")),(0,r.kt)("p",null,"At this stage, the application is not yet connected to the database. So, if you\ntry to play around the APIs, you'll see errors returned by the application."),(0,r.kt)("p",null,"For example, if you try to access the list of all pets, you can see an error like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'curl -X GET "http://localhost:9966/petclinic/api/pets" -H "accept: application/json"\n\n{"className":"org.springframework.transaction.CannotCreateTransactionException","exMessage":"Could\nnot open JPA EntityManager for transaction; nested exception is\norg.hibernate.exception.JDBCConnectionException: Unable to acquire JDBC\nConnection"}\n')),(0,r.kt)("p",null,"Now, we are going to see how you can use Service Binding to easily connect the application to the database."),(0,r.kt)("h2",{id:"connecting-the-application-to-the-database"},"Connecting the application to the database"),(0,r.kt)("p",null,"Suppose the Service Binding operator is not present.  In that case, the\napplication's admin needs to extract all the configuration details and create a\nSecret resource and expose it to the application through volume mount in\nKubernetes.  The steps would be something like this:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Identify the required values for connecting the application to the database"),(0,r.kt)("li",{parentName:"ol"},"Locate the resources where the values are present"),(0,r.kt)("li",{parentName:"ol"},"Take the values from different resources and create a Secret resource"),(0,r.kt)("li",{parentName:"ol"},"Mount the Secret resource into the application"),(0,r.kt)("li",{parentName:"ol"},"Depending on the application requirement the values should be exposed as env var or file.")),(0,r.kt)("p",null,"In this quick start, we are going to leverage Service Binding as a way to easily\nand safely connect the application to the database service.  In order to do\nthat, we'll need to create a Service Binding ressource which will trigger the\nService Binding Operator to inject the binding metadatas into the application."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create the ServiceBinding custom resource to inject the bindings:")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},".spec")," has two sections, the first one is a list of service resources\n(",(0,r.kt)("inlineCode",{parentName:"p"},".spec.services"),") and the second one is the ",(0,r.kt)("inlineCode",{parentName:"p"},".spec.application"),".  The services\nresources points to the database's service resources.  How the values are exposed from\nservice resources are explained ",(0,r.kt)("a",{parentName:"p",href:"../exposing-binding-data/intro-expose-binding"},"Exposing binding\ndata")," section.  In the below\nServiceBinding resource, there are two service resources, one custom resource\nand another Secret resource.  This is required as the values required for\ndatabase connectivity are living in these two resources.  The application\npoints to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Deployment")," or any similar resource with an embedded ",(0,r.kt)("inlineCode",{parentName:"p"},"PodSpec"),".\nThe mappings has extra mappings required for connectity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: binding.operators.coreos.com/v1alpha1\nkind: ServiceBinding\nmetadata:\n    name: spring-petclinic-rest\n    namespace: my-postgresql\nspec:\n    services:\n    - group: "crunchydata.com"\n      version: v1\n      kind: Pgcluster\n      name: hippo\n    - group: ""\n      version: v1\n      kind: Secret\n      name: hippo-hippo-secret\n    application:\n      name: spring-petclinic-rest\n      group: apps\n      version: v1\n      resource: deployments\n    mappings:\n    - name: type\n      value: "postgresql"\n')),(0,r.kt)("p",null,"For simplicity, you can copy/paste the following command to create the resource:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/slemeur/service-binding-documentation/raw/main/static/resources/service-binding.yaml\n")),(0,r.kt)("p",null,"To learn more about creating service bindings, you can find more information on\nthe following\n",(0,r.kt)("a",{parentName:"p",href:"../creating-service-bindings/creating-service-binding"},"document"),".."),(0,r.kt)("p",null,"By creating this ",(0,r.kt)("inlineCode",{parentName:"p"},"Service Binding")," resource, we now have values from the\ndatabase's binding metadata injected into the application container as files\n(that's the default behavior, but you can also inject environment variables if\nyou prefer).  If you check under ",(0,r.kt)("inlineCode",{parentName:"p"},"/bindings/spring-petclinic-rest")," directory\nyou'll see all the values from the secret resource injected there.  In the above\nexample, you'll find ",(0,r.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"password"),".  And the values pointed out\nthrough the annotation are also injected which includes ",(0,r.kt)("inlineCode",{parentName:"p"},"database"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"host"),", and\n",(0,r.kt)("inlineCode",{parentName:"p"},"port"),".  Finally, from the mappings, ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," is also injected.  The application\nlooks for ",(0,r.kt)("inlineCode",{parentName:"p"},"SERVICE_BINDING_ROOT")," env var to find the location of ",(0,r.kt)("inlineCode",{parentName:"p"},"/bindings"),"\ndirectory.  The Spring Boot application used here is built using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spring-cloud/spring-cloud-bindings"},"Spring Cloud\nBindings")," and it looks\nfor ",(0,r.kt)("inlineCode",{parentName:"p"},"SERVICE_BINDING_ROOT")," to get the injected bindings.  See the using\ninjected bindings section\nabout how the values can be used from the application."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Let's now check how the application is behaving and setup the port forwarding\nof the application port to access it from our local environment")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl port-forward --address 0.0.0.0 svc/spring-petclinic-rest 9966:80 -n my-postgresql\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Open ",(0,r.kt)("a",{parentName:"li",href:"http://localhost:9966/petclinic"},"http://localhost:9966/petclinic"),", you should see a ",(0,r.kt)("a",{parentName:"li",href:"https://swagger.io"},"Swagger UI")," where you can play with the API.")),(0,r.kt)("p",null,"If you try to access list of all pets, you can see the application is now\nconnected to the database and see the sample data initially configured:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ curl -X GET "http://localhost:9966/petclinic/api/pets" -H "accept: application/json"\n[{"id":1,"name":"Leo","birthDate":"2000/09/07","type":{"id":1,"name":"cat"},\n"owner":{"id":1,"firstName":"George","lastName":"Franklin","address":"110...\n')),(0,r.kt)("h2",{id:"next-steps"},"Next Steps"),(0,r.kt)("p",null,"In this sample, we setup a database and connected it to an application using the\nService Binding operator to collect the connection metadata and expose them to\nthe application."),(0,r.kt)("p",null,"By using service bindings, developers are able to more easily leverage the\nservices available to them on a Kubernetes cluster.  This method provides\nconsistency accross different services and is repeatable for the developers. By\nremove the usual manual and error prone configuration, they benefit from a\nunified way to do application-to-service linkage."),(0,r.kt)("p",null,"You can continue to learn more about Service Binding by:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../creating-service-bindings/creating-service-binding"},"Creating Service Bindings")),(0,r.kt)("li",{parentName:"ul"},"Using Injected Bindings"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../exposing-binding-data/intro-expose-binding"},"Exposing binding data"))))}d.isMDXComponent=!0},3762:function(e,t,n){t.Z=n.p+"assets/images/postgresql-spring-boot-720d85975fab6ccc1f2948da125a38c2.png"}}]);