"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[368],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return t?i.createElement(f,o(o({ref:n},l),{},{components:t})):i.createElement(f,o({ref:n},l))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4030:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var i=t(7462),a=t(3366),r=(t(7294),t(3905)),o=["components"],s={sidebar_position:1},p={unversionedId:"exposing-binding-data/intro-expose-binding",id:"exposing-binding-data/intro-expose-binding",isDocsHomePage:!1,title:"Introduction",description:"Connecting applications to backing services is always a challenge as each",source:"@site/docs/exposing-binding-data/intro-expose-binding.md",sourceDirName:"exposing-binding-data",slug:"/exposing-binding-data/intro-expose-binding",permalink:"/service-binding-documentation/docs/exposing-binding-data/intro-expose-binding",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/exposing-binding-data/intro-expose-binding.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Template",permalink:"/service-binding-documentation/docs/using-injected-bindings/template"},next:{title:"Provisioned Service",permalink:"/service-binding-documentation/docs/exposing-binding-data/provisioned-service"}},c=[{value:"Data Model",id:"data-model",children:[]}],l={toc:c};function d(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Connecting applications to backing services is always a challenge as each\nservice provider suggests a different way to access their secrets and consume\nthem in an application.  Service Binding helps the developers by providing a\nconsistent and predictable experience and removes error-prone usual manual steps\nto configure the binding between an application and backing services."),(0,r.kt)("p",null,"For the Service Binding Operator to provide the binding metadata, the backing\nservices must expose the binding metadata in a way that can be detected by\nService Binding Operator."),(0,r.kt)("p",null,"Binding metadata is exposed for the following scenarios:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"The backing service is considered as a ",(0,r.kt)("a",{parentName:"strong",href:"https://github.com/k8s-service-bindings/spec#provisioned-service"},"Provisioned\nService"))," resource: The service you intend to connect\nto, is compliant with the Service Binding specification and the detection of\nall the binding metadata values is automatic.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"The backing service is not a ",(0,r.kt)("a",{parentName:"strong",href:"https://github.com/k8s-service-bindings/spec#provisioned-service"},"Provisioned Service")),"\nresource: You must expose the binding metadata from the backing service.  You\ncan expose the binding metadata using any of the following methods:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/k8s-service-bindings/spec#direct-secret-reference"},"Direct Secret Reference")),": When all the\nrequired binding values are available in a ",(0,r.kt)("inlineCode",{parentName:"li"},"Secret")," that you can reference\nin your Service Binding definition."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generate Secret through CRD or CR annotations"),": When you can annotate the\nresources of the backing service, to expose the binding metadata with\nspecific annotations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Generate Secret through OLM descriptors"),": when you can provide OLM\ndescriptors, if the backing service is provided by an Operator."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Detect Binding metadata through owned resources"),": when the backing\nservice owns Kubernetes resources such as ",(0,r.kt)("inlineCode",{parentName:"li"},"Service"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Route"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"ConfigMap")," or\n",(0,r.kt)("inlineCode",{parentName:"li"},"Secret")," that you can use to detect the binding metadata.")))),(0,r.kt)("p",null,"Service Binding Operator provides the ability to expose the values from the\nbacking service resources and CRDs.  You can use the following methods to map\nand expose the binding metadata:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Expose a string from a resource"),(0,r.kt)("li",{parentName:"ul"},"Expose an entire ConfigMap or Secret that is referenced from a resource"),(0,r.kt)("li",{parentName:"ul"},"Expose a specific entry from a ConfigMap or Secret that is referenced from a resource"),(0,r.kt)("li",{parentName:"ul"},"Expose entries from a collection of objects, mapping keys and values from\nentries in a ConfigMap or Secret that is referenced from a resource"),(0,r.kt)("li",{parentName:"ul"},"Expose a collection of specific entry values in a resource's collection of\nobjects"),(0,r.kt)("li",{parentName:"ul"},"Map each value to a specific key"),(0,r.kt)("li",{parentName:"ul"},"Map each value of a collection to a key with a generated name")),(0,r.kt)("h2",{id:"data-model"},"Data Model"),(0,r.kt)("p",null,"This section explains the data model used in the annotation and OLM descripors.\nThe data model is same for CRD or CR annotations and OLM descriptors, but the\nsyntax is different, which is explained in the respective sections."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"path"),": A template representation of the path to the element in the Kubernetes\nresource.  The value of ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is specified as JSONPath.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"elementType"),": Specifies whether the value of the element referenced in ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),"\ncomplies with any one of the following types ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"sliceOfStrings")," or\n",(0,r.kt)("inlineCode",{parentName:"p"},"sliceOfMaps"),".  Defaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"elementType")," is not specified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"objectType"),": Specifies whether the value of the element indicated in ",(0,r.kt)("inlineCode",{parentName:"p"},"path"),"\nrefers to a ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigMap"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Secret")," or a plain string in the current namespace!\nDefaults to ",(0,r.kt)("inlineCode",{parentName:"p"},"Secret")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"objectType")," is not specified and ",(0,r.kt)("inlineCode",{parentName:"p"},"elementType")," is\nnon-string.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sourceKey"),": Specifies the key in the ConfigMap or Secret that is to be added\nto the binding Secret.  When used in conjunction with\n",(0,r.kt)("inlineCode",{parentName:"p"},"elementType"),"=",(0,r.kt)("inlineCode",{parentName:"p"},"sliceOfMaps"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"sourceKey")," specifies the key in the slice of\nmaps whose value would be used as a key in the binding Secret.  This optional\nfield can be used if the operator author intends to express that when a\nspecific field in the referenced ",(0,r.kt)("inlineCode",{parentName:"p"},"Secret")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigMap")," is bindable.  All\nvalues from ",(0,r.kt)("inlineCode",{parentName:"p"},"Secret")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigMap")," are exposed if ",(0,r.kt)("inlineCode",{parentName:"p"},"sourceKey")," is not\nspecified.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"sourceValue"),": Specifies the key in the slice of maps whose value would be\nused as the value, corresponding to the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"sourceKey")," that is added\nas the key, in the binding Secret.  Mandatory only if ",(0,r.kt)("inlineCode",{parentName:"p"},"elementType")," is\n",(0,r.kt)("inlineCode",{parentName:"p"},"sliceOfMaps"),"."))))}d.isMDXComponent=!0}}]);